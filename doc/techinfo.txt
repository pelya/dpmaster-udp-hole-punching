
                         Dpmaster, an open master server
                         -------------------------------

                              Technical information
                              ---------------------


* COMPILING DPMASTER:

Dpmaster is being developed mostly on PC hardware, on Linux and Windows, using
GCC and MS Visual Studio respectively. If you use one of these compilers, you
should be able to compile dpmaster without any problem.
Dpmaster is also occasionally compiled on BSD systems, and on Win32 systems
using MinGW32 (GCC for Win32). It may not compile on these configurations, but
if you're a C developer you should be able to solve the problem(s) easily.

Although great care has been taken to avoid issues regarding CPU endianess and
word size, dpmaster is rarely compiled and run on non-PC hardware. Please
report us any problem on such a system.

To compile dpmaster using GCC on a UNIX system, just type "make" or "make debug"
to build a debug version. To clean the directory from the binary and temporary
files, type "make clean". Note that MinGW32 requires a special syntax: the
commands are respectively "make mingw", "make mingw-debug" and
"make mingw-clean" in this case.

For compiling with MSVC6, double-click on "dpmaster.dsw" to load the project,
go to the "Build" menu, then "Set Active Configuration..." and select "dpmaster
- Win32 Release". Hit 'F7' to build the project. You'll find the executable
file in the "Release" subdirectory.


* PROTOCOL:

Dpmaster uses a protocol that is heavily inspired by Quake III Arena's master
server protocol. The reference document for this protocol can be found on id
Software anonymous FTP site:
    ftp://ftp.idsoftware.com/idstuff/quake3/docs/server.txt
We have tried to keep our protocol as close as possible to Q3A's one, for a
matter of compatibility with the numerous tools that exist for this game.

Dpmaster uses 5 types of messages, plus 2 extra types for supporting IPv6, the
successor of the current internet protocol IPv4. The 5 basic types are:
"heartbeat", "getinfo", "infoResponse", "getservers" and "getserversResponse".
The 2 extra types are "getserversExt" and "getserversExtResponse", 2 extended
versions of the basic types "getservers" and "getserversResponse" respectively.
The first 3 basic types are used by servers to authenticate and register to a
master server. The remaining types are used by clients to get a list of servers
from a master server. All messages start with 4 bytes set to 0xFF (character
255), then the command type in plain text.

The 2 basic types of messages which are likely to cause compliance problems with
Q3A-compatible tools are: "heartbeat" (requires a different protocol string) and
"getservers" (requires a game name before the protocol number, and may contain
unknown filtering options). Also, note that the "infoResponse" messages may be
considered invalid by programs which require precisely the key names used by Q3A
in the infostring.

    1) heartbeat:

        - description:

            The heartbeat is sent by a server when it wants to get noticed by a
            master. A server should send an heartbeat each time it becomes empty
            or full, plus it should make sure the master gets at least one
            heartbeat from it every 5-10 minutes, so the master doesn't remove
            it from its list of active servers.

        - samples:

            "\xFF\xFF\xFF\xFFheartbeat QuakeArena-1\x0A" (Q3A protocol)
            "\xFF\xFF\xFF\xFFheartbeat DarkPlaces\x0A"   (DP protocol)

        - syntax:

            A protocol string is required after the type name, and a line feed
            (character 10, '\n') closes the message. Note that the string after
            the type name is a PROTOCOL STRING, not a game string! Please make
            sure you use "DarkPlaces" as your protocol string. Dpmaster only
            checks this string for debugging purpose for the moment, but it's
            likely to change in the future. You're warned.

    2) getinfo:

        - description:

            This message is sent by a master to a server, usually in response
            to an "hearbeat" by this very server. It's used by the master to
            trigger the sending of an "infoResponse" from the server. The
            challenge string is necessary to authenticate the server's
            corresponding "infoResponse".

        - sample:

            "\xFF\xFF\xFF\xFFgetinfo A_ch4Lleng3"

        - syntax:

            The message type is followed by a challenge string. All printable
            characters but 5 are allowed in this string (from ASCII code 33 to
            126). The 5 exceptions are characters '\', '/', ';', '"' and '%'.

    3) infoResponse:

        - description:

             An "infoResponse" message is the reponse to a "getinfo" request.
             It contains an infostring including the most important information
             about the current server state.

        - sample:

            "\xFF\xFF\xFF\xFFinfoResponse\x0A\\sv_maxclients\\8\\clients\\0\\.."

        - syntax:

            The message type is followed by a line feed character and the
            server's infostring. An infostring is a series of keys and values
            separated by '\'. Popular keys include "hostname" (the host name),
            "mapname" (the map currently played on this server).
            This infostring must contain the challenge string sent by the
            master in the "getinfo" that triggered this response (key name:
            "challenge"). "sv_maxclients" (the maximum number of clients
            allowed on the server; must not be 0), "protocol" (the protocol
            number) and "clients" (the current number of clients on the
            server) must also be present. Except for Q3A, "gamename" (the game
            name) is mandatory too, and its value must not contain whitespaces.
            
            Starting from version 2.0, dpmaster also saves the value of the
            "gametype" key, which may be used as a filter in server list queries
            (see the "getservers" message description below for more details).
            If no "gametype" key is present in the response message, this number
            defaults to 0.

    4) getservers:

        - description:

             A "getservers" message is sent to a master by a client who wants
             to get a list of servers. It triggers a "getserversReponse"
             message from the master.

        - samples:

            "\xFF\xFF\xFF\xFFgetservers 67 ffa empty full" (Q3A)
            "\xFF\xFF\xFF\xFFgetservers Nexuiz 3"          (DP running Nexuiz)
            "\xFF\xFF\xFF\xFFgetservers qfusion 39 full"   (QFusion)

        - syntax:

            The message must contain a protocol version, and optionally "empty"
            and/or "full" depending on whether or not the client also wants to
            get empty or full servers. Except for Q3A, the client has to specify
            its game name, right before the protocol number.

            Starting from dpmaster version 2.0, you may also add in the option
            list at most one gametype filter "gametype=X", where X is the
            gametype number a server must have declared to be part of the 
            returned list. 4 other keywords are allowed as shortcuts to this
            filter, for compatibility with Q3A: "ffa", "tourney", "team" and
            "ctf" are equivalent to "gametype=0", "gametype=1", "gametype=3" and
            "gametype=4" respectively.

    5) getserversResponse:

        - description:

            A "getserversResponse" message contains a list of IPv4 servers
            requested by a client.

        - sample:

            "\xFF\xFF\xFF\xFFgetserversResponse\\[...]\\EOT\0\0\0"

        - syntax:

             The list of servers is composed of IPv4 addresses and ports. Each
             server is stored on 4 bytes for the IP address and 2 bytes for the
             port number, and a '\' to separate it from the next server. The
             list ends with the 6-byte string "EOT\0\0\0'. All numbers are
             big-endian oriented (most significant bytes first). For instance,
             a server hosted at address 1.2.3.4 on port 2048 will be sent as:
             "\x01\x02\x03\x04\x08\x00".

    6) getserversExt:

        - description:

             A "getserversExt" message is sent to a master by a client who wants
             to get a list of servers. It triggers a "getserversExtReponse"
             message from the master.

        - sample:

            "\xFF\xFF\xFF\xFFgetserversExt Quake3Arena 68 ipv4 empty ipv6"

        - syntax:

            The message must contain the game name, a protocol version, and
            optionally a list of whitespace-separated filtering options. All
            those defined for the "getservers" message ("empty", "full,
            "gametype=X" and its shortcuts) are currently supported, plus 2
            other ones: "ipv4" and "ipv6" to ask specifically for servers using
            this/these protocol(s). If no protocol name appears in the list, the
            master server won't filter the servers by protocol, behaving in
            practice as if all protocols appeared in the list.

            As you can see in this sample, since the game name is mandatory in
            an extended query, you'll have to use the game name "Quake3Arena"
            explicitely if you want to ask for Q3A servers.

    7) getserversExtResponse:

        - description:

            A "getserversExtResponse" message contains a list of IPv4 and/or
            IPv6 servers requested by a client.

        - sample:

            "\xFF\xFF\xFF\xFFgetserversExtResponse/[...]\\[...]\\EOT\0\0\0"

        - syntax:

            The list of servers is composed of IPv4 and IPv6 addresses and their
            associated ports. Each server is stored on 4 bytes for an IPv4
            address, 16 bytes for an IPv6 address, plus 2 bytes for the port
            number. To differenciate and separate those addresses, a '\'
            character precedes every IPv4 address, and a '/' character precedes
            every IPv6 address. The list ends with a fake IPv4 address
            "EOT\0\0\0". All numbers are big-endian oriented (most significant
            bytes first). For instance, an IPv4 server hosted at address 1.2.3.4
            on port 2048 will be sent as: "\x01\x02\x03\x04\x08\x00".


* BEHAVIOUR:

The way dpmaster behaves when talking to clients and servers is largely based
on one important idea: authenticated "infoResponse" messages are the only
messages we can reasonably trust.

When dpmaster receives an "heartbeat" message from a server, it will reply with
a "getinfo" and register this server for a couple of seconds. If it hasn't sent
back an "infoResponse" containing a valid challenge string by this time,
dpmaster forgets it. Further "heartbeat" messages can't prolong this time,
and the server IP address won't be transmitted to any client during that period
of time.

When dpmaster receives a valid "infoResponse" from a server, it associates a new
timeout value to it (15 min). Only another valid "infoResponse" from this very
server will be able to refresh this timeout value. Its IP address will be
transmitted to the appropriate clients, until it timeouts. Then, dpmaster
forgets it.

You may have noticed that this behaviour doesn't take into account the fact
that some servers send 2 "heartbeat" messages when closing. I deliberately
choose to keep the behaviour as simple and predictible as possible, hopefully
making it free from any major abuse.


--
Mathieu Olivier
molivier, at users.sourceforge.net
